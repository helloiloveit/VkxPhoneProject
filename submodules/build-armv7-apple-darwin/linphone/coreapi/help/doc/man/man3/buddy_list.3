.TH "Managing Buddies and buddy list and presence" 3 "Wed Jul 31 2013" "Version 3.6.99" "liblinphone" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Managing Buddies and buddy list and presence \- 
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef enum \fB_LinphoneOnlineStatus\fP \fBLinphoneOnlineStatus\fP"
.br
.ti -1c
.RI "typedef struct _LinphoneFriend \fBLinphoneFriend\fP"
.br
.ti -1c
.RI "typedef enum 
.br
\fBLinphonePresenceBasicStatus\fP \fBLinphonePresenceBasicStatus\fP"
.br
.ti -1c
.RI "typedef enum 
.br
\fBLinphonePresenceActivityType\fP \fBLinphonePresenceActivityType\fP"
.br
.ti -1c
.RI "typedef struct 
.br
\fB_LinphonePresenceModel\fP \fBLinphonePresenceModel\fP"
.br
.ti -1c
.RI "typedef struct 
.br
_LinphonePresenceActivity \fBLinphonePresenceActivity\fP"
.br
.ti -1c
.RI "typedef struct 
.br
_LinphonePresenceNote \fBLinphonePresenceNote\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBLinphoneSubscribePolicy\fP { \fBLinphoneSPWait\fP, \fBLinphoneSPDeny\fP, \fBLinphoneSPAccept\fP }"
.br
.ti -1c
.RI "enum \fB_LinphoneOnlineStatus\fP { \fBLinphoneStatusOffline\fP, \fBLinphoneStatusOnline\fP, \fBLinphoneStatusBusy\fP, \fBLinphoneStatusBeRightBack\fP, \fBLinphoneStatusAway\fP, \fBLinphoneStatusOnThePhone\fP, \fBLinphoneStatusOutToLunch\fP, \fBLinphoneStatusDoNotDisturb\fP, \fBLinphoneStatusMoved\fP, \fBLinphoneStatusAltService\fP, \fBLinphoneStatusPending\fP, \fBLinphoneStatusVacation\fP }"
.br
.ti -1c
.RI "enum \fBLinphonePresenceBasicStatus\fP { \fBLinphonePresenceBasicStatusOpen\fP, \fBLinphonePresenceBasicStatusClosed\fP }"
.br
.ti -1c
.RI "enum \fBLinphonePresenceActivityType\fP { \fBLinphonePresenceActivityOffline\fP, \fBLinphonePresenceActivityOnline\fP, \fBLinphonePresenceActivityAppointment\fP, \fBLinphonePresenceActivityAway\fP, \fBLinphonePresenceActivityBreakfast\fP, \fBLinphonePresenceActivityBusy\fP, \fBLinphonePresenceActivityDinner\fP, \fBLinphonePresenceActivityHoliday\fP, \fBLinphonePresenceActivityInTransit\fP, \fBLinphonePresenceActivityLookingForWork\fP, \fBLinphonePresenceActivityLunch\fP, \fBLinphonePresenceActivityMeal\fP, \fBLinphonePresenceActivityMeeting\fP, \fBLinphonePresenceActivityOnThePhone\fP, \fBLinphonePresenceActivityOther\fP, \fBLinphonePresenceActivityPerformance\fP, \fBLinphonePresenceActivityPermanentAbsence\fP, \fBLinphonePresenceActivityPlaying\fP, \fBLinphonePresenceActivityPresentation\fP, \fBLinphonePresenceActivityShopping\fP, \fBLinphonePresenceActivitySleeping\fP, \fBLinphonePresenceActivitySpectator\fP, \fBLinphonePresenceActivitySteering\fP, \fBLinphonePresenceActivityTravel\fP, \fBLinphonePresenceActivityTV\fP, \fBLinphonePresenceActivityUnknown\fP, \fBLinphonePresenceActivityVacation\fP, \fBLinphonePresenceActivityWorking\fP, \fBLinphonePresenceActivityWorship\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "LINPHONE_PUBLIC \fBLinphoneFriend\fP * \fBlinphone_friend_new\fP ()"
.br
.ti -1c
.RI "LINPHONE_PUBLIC \fBLinphoneFriend\fP * \fBlinphone_friend_new_with_addr\fP (const char *addr)"
.br
.ti -1c
.RI "LINPHONE_PUBLIC void \fBlinphone_friend_destroy\fP (\fBLinphoneFriend\fP *lf)"
.br
.ti -1c
.RI "LINPHONE_PUBLIC int \fBlinphone_friend_set_addr\fP (\fBLinphoneFriend\fP *fr, const \fBLinphoneAddress\fP *address)"
.br
.ti -1c
.RI "LINPHONE_PUBLIC int \fBlinphone_friend_set_name\fP (\fBLinphoneFriend\fP *lf, const char *name)"
.br
.ti -1c
.RI "LINPHONE_PUBLIC const 
.br
\fBLinphoneAddress\fP * \fBlinphone_friend_get_address\fP (const \fBLinphoneFriend\fP *lf)"
.br
.ti -1c
.RI "LINPHONE_PUBLIC bool_t \fBlinphone_friend_subscribes_enabled\fP (const \fBLinphoneFriend\fP *lf)"
.br
.ti -1c
.RI "LINPHONE_PUBLIC int \fBlinphone_friend_enable_subscribes\fP (\fBLinphoneFriend\fP *fr, bool_t val)"
.br
.ti -1c
.RI "LINPHONE_PUBLIC int \fBlinphone_friend_set_inc_subscribe_policy\fP (\fBLinphoneFriend\fP *fr, \fBLinphoneSubscribePolicy\fP pol)"
.br
.ti -1c
.RI "LINPHONE_PUBLIC 
.br
\fBLinphoneSubscribePolicy\fP \fBlinphone_friend_get_inc_subscribe_policy\fP (const \fBLinphoneFriend\fP *lf)"
.br
.ti -1c
.RI "LINPHONE_PUBLIC void \fBlinphone_friend_edit\fP (\fBLinphoneFriend\fP *fr)"
.br
.ti -1c
.RI "LINPHONE_PUBLIC void \fBlinphone_friend_done\fP (\fBLinphoneFriend\fP *fr)"
.br
.ti -1c
.RI "LINPHONE_PUBLIC 
.br
\fBLinphoneOnlineStatus\fP \fBlinphone_friend_get_status\fP (const \fBLinphoneFriend\fP *lf)"
.br
.RI "\fIGet the status of a friend\&. \fP"
.ti -1c
.RI "LINPHONE_PUBLIC const 
.br
\fBLinphonePresenceModel\fP * \fBlinphone_friend_get_presence_model\fP (\fBLinphoneFriend\fP *lf)"
.br
.RI "\fIGet the presence information of a friend\&. \fP"
.ti -1c
.RI "LINPHONE_PUBLIC const char * \fBlinphone_online_status_to_string\fP (\fBLinphoneOnlineStatus\fP ss)"
.br
.ti -1c
.RI "LINPHONE_PUBLIC void \fBlinphone_core_set_presence_info\fP (\fBLinphoneCore\fP *lc, int minutes_away, const char *alternative_contact, \fBLinphoneOnlineStatus\fP os)"
.br
.RI "\fISet my presence status\&. \fP"
.ti -1c
.RI "LINPHONE_PUBLIC void \fBlinphone_core_set_presence_model\fP (\fBLinphoneCore\fP *lc, \fBLinphonePresenceModel\fP *presence)"
.br
.RI "\fISet my presence status\&. \fP"
.ti -1c
.RI "LINPHONE_PUBLIC 
.br
\fBLinphoneOnlineStatus\fP \fBlinphone_core_get_presence_info\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "\fIGet my presence status\&. \fP"
.ti -1c
.RI "LINPHONE_PUBLIC 
.br
\fBLinphonePresenceModel\fP * \fBlinphone_core_get_presence_model\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "\fIGet my presence status\&. \fP"
.ti -1c
.RI "LINPHONE_PUBLIC void \fBlinphone_core_add_friend\fP (\fBLinphoneCore\fP *lc, \fBLinphoneFriend\fP *fr)"
.br
.ti -1c
.RI "LINPHONE_PUBLIC void \fBlinphone_core_remove_friend\fP (\fBLinphoneCore\fP *lc, \fBLinphoneFriend\fP *fr)"
.br
.ti -1c
.RI "LINPHONE_PUBLIC void \fBlinphone_core_reject_subscriber\fP (\fBLinphoneCore\fP *lc, \fBLinphoneFriend\fP *lf)"
.br
.ti -1c
.RI "LINPHONE_PUBLIC const MSList * \fBlinphone_core_get_friend_list\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "LINPHONE_PUBLIC void \fBlinphone_core_notify_all_friends\fP (\fBLinphoneCore\fP *lc, \fBLinphonePresenceModel\fP *presence)"
.br
.ti -1c
.RI "LINPHONE_PUBLIC 
.br
\fBLinphonePresenceModel\fP * \fBlinphone_presence_model_new\fP (void)"
.br
.RI "\fICreates a default presence model\&. \fP"
.ti -1c
.RI "LINPHONE_PUBLIC 
.br
\fBLinphonePresenceModel\fP * \fBlinphone_presence_model_new_with_activity\fP (\fBLinphonePresenceActivityType\fP activity, const char *description)"
.br
.RI "\fICreates a presence model specifying an activity\&. \fP"
.ti -1c
.RI "LINPHONE_PUBLIC 
.br
\fBLinphonePresenceModel\fP * \fBlinphone_presence_model_new_with_activity_and_note\fP (\fBLinphonePresenceActivityType\fP activity, const char *description, const char *note, const char *lang)"
.br
.RI "\fICreates a presence model specifying an activity and adding a note\&. \fP"
.ti -1c
.RI "\fBLinphonePresenceModel\fP * \fBlinphone_presence_model_ref\fP (\fBLinphonePresenceModel\fP *model)"
.br
.ti -1c
.RI "\fBLinphonePresenceModel\fP * \fBlinphone_presence_model_unref\fP (\fBLinphonePresenceModel\fP *model)"
.br
.ti -1c
.RI "void \fBlinphone_presence_model_set_user_data\fP (\fBLinphonePresenceModel\fP *model, void *user_data)"
.br
.ti -1c
.RI "void * \fBlinphone_presence_model_get_user_data\fP (\fBLinphonePresenceModel\fP *model)"
.br
.ti -1c
.RI "LINPHONE_PUBLIC 
.br
\fBLinphonePresenceBasicStatus\fP \fBlinphone_presence_model_get_basic_status\fP (const \fBLinphonePresenceModel\fP *model)"
.br
.RI "\fIGets the basic status of a presence model\&. \fP"
.ti -1c
.RI "LINPHONE_PUBLIC time_t \fBlinphone_presence_model_get_timestamp\fP (const \fBLinphonePresenceModel\fP *model)"
.br
.RI "\fIGets the timestamp of a presence model\&. \fP"
.ti -1c
.RI "LINPHONE_PUBLIC char * \fBlinphone_presence_model_get_contact\fP (const \fBLinphonePresenceModel\fP *model)"
.br
.RI "\fIGets the contact of a presence model\&. \fP"
.ti -1c
.RI "LINPHONE_PUBLIC void \fBlinphone_presence_model_set_contact\fP (\fBLinphonePresenceModel\fP *model, const char *contact)"
.br
.RI "\fISets the contact of a presence model\&. \fP"
.ti -1c
.RI "LINPHONE_PUBLIC unsigned int \fBlinphone_presence_model_nb_activities\fP (const \fBLinphonePresenceModel\fP *model)"
.br
.RI "\fIGets the number of activities included in the presence model\&. \fP"
.ti -1c
.RI "LINPHONE_PUBLIC 
.br
\fBLinphonePresenceActivity\fP * \fBlinphone_presence_model_get_nth_activity\fP (const \fBLinphonePresenceModel\fP *model, unsigned int idx)"
.br
.RI "\fIGets the nth activity of a presence model\&. \fP"
.ti -1c
.RI "LINPHONE_PUBLIC 
.br
\fBLinphonePresenceActivity\fP * \fBlinphone_presence_model_get_activity\fP (const \fBLinphonePresenceModel\fP *model)"
.br
.RI "\fIGets the first activity of a presence model (there is usually only one)\&. \fP"
.ti -1c
.RI "LINPHONE_PUBLIC int \fBlinphone_presence_model_set_activity\fP (\fBLinphonePresenceModel\fP *model, \fBLinphonePresenceActivityType\fP activity, const char *description)"
.br
.RI "\fISets the activity of a presence model (limits to only one activity)\&. \fP"
.ti -1c
.RI "LINPHONE_PUBLIC 
.br
\fBLinphonePresenceNote\fP * \fBlinphone_presence_model_get_note\fP (const \fBLinphonePresenceModel\fP *model, const char *lang)"
.br
.RI "\fIGets the first note of a presence model (there is usually only one)\&. \fP"
.ti -1c
.RI "LINPHONE_PUBLIC int \fBlinphone_presence_model_add_note\fP (\fBLinphonePresenceModel\fP *model, const char *note_content, const char *lang)"
.br
.RI "\fIAdds a note to a presence model\&. \fP"
.ti -1c
.RI "LINPHONE_PUBLIC int \fBlinphone_presence_model_clear_notes\fP (\fBLinphonePresenceModel\fP *model)"
.br
.RI "\fIClears all the notes of a presence model\&. \fP"
.ti -1c
.RI "\fBLinphonePresenceActivity\fP * \fBlinphone_presence_activity_ref\fP (\fBLinphonePresenceActivity\fP *activity)"
.br
.ti -1c
.RI "\fBLinphonePresenceActivity\fP * \fBlinphone_presence_activity_unref\fP (\fBLinphonePresenceActivity\fP *activity)"
.br
.ti -1c
.RI "void \fBlinphone_presence_activity_set_user_data\fP (\fBLinphonePresenceActivity\fP *activity, void *user_data)"
.br
.ti -1c
.RI "void * \fBlinphone_presence_activity_get_user_data\fP (\fBLinphonePresenceActivity\fP *activity)"
.br
.ti -1c
.RI "LINPHONE_PUBLIC char * \fBlinphone_presence_activity_to_string\fP (const \fBLinphonePresenceActivity\fP *activity)"
.br
.RI "\fIGets the string representation of a presence activity\&. \fP"
.ti -1c
.RI "LINPHONE_PUBLIC 
.br
\fBLinphonePresenceActivityType\fP \fBlinphone_presence_activity_get_type\fP (const \fBLinphonePresenceActivity\fP *activity)"
.br
.RI "\fIGets the activity type of a presence activity\&. \fP"
.ti -1c
.RI "LINPHONE_PUBLIC const char * \fBlinphone_presence_activity_get_description\fP (const \fBLinphonePresenceActivity\fP *activity)"
.br
.RI "\fIGets the description of a presence activity\&. \fP"
.ti -1c
.RI "\fBLinphonePresenceNote\fP * \fBlinphone_presence_note_ref\fP (\fBLinphonePresenceNote\fP *note)"
.br
.ti -1c
.RI "\fBLinphonePresenceNote\fP * \fBlinphone_presence_note_unref\fP (\fBLinphonePresenceNote\fP *note)"
.br
.ti -1c
.RI "void \fBlinphone_presence_note_set_user_data\fP (\fBLinphonePresenceNote\fP *note, void *user_data)"
.br
.ti -1c
.RI "void * \fBlinphone_presence_note_get_user_data\fP (\fBLinphonePresenceNote\fP *note)"
.br
.ti -1c
.RI "LINPHONE_PUBLIC const char * \fBlinphone_presence_note_get_content\fP (const \fBLinphonePresenceNote\fP *note)"
.br
.RI "\fIGets the content of a presence note\&. \fP"
.ti -1c
.RI "LINPHONE_PUBLIC const char * \fBlinphone_presence_note_get_lang\fP (const \fBLinphonePresenceNote\fP *note)"
.br
.RI "\fIGets the language of a presence note\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
\fBBuddies and buddy list\fP 
.br
Each buddy is represented by a \fBLinphoneFriend\fP object created by function \fBlinphone_friend_new()\fP\&. Buddy configuration parameters like \fBsip uri \fP or \fBstatus publication \fP policy for this \fBfriend \fP are configurable for each buddy\&. 
.br
Here under a typical buddy creation: 
.br
 
.PP
.nf
LinphoneFriend* my_friend=linphone_friend_new_with_addr('sip:joe@sip\&.linphone\&.org'); /*creates friend object for buddy joe*/
linphone_friend_enable_subscribes(my_friend,TRUE); /*configure this friend to emit SUBSCRIBE message after being added to LinphoneCore*/
linphone_friend_set_inc_subscribe_policy(my_friend,LinphoneSPAccept); /* accept Incoming subscription request for this friend*/

.fi
.PP
 \fBfriends \fP status changes are reported by callback \fBLinphoneCoreVTable\&.notify_presence_recv\fP 
.PP
.nf
static void notify_presence_recv_updated (struct _LinphoneCore *lc,  LinphoneFriend *friend) {
        const LinphoneAddress* friend_address = linphone_friend_get_address(friend);
        printf('New state state [%s] for user id [%s] \n'
                                ,linphone_online_status_to_string(linphone_friend_get_status(friend))
                                ,linphone_address_as_string (friend_address));
}

.fi
.PP
 
.br
Once created a buddy can be added to the buddy list using function \fBlinphone_core_add_friend()\fP \&. Added friends will be notified about \fBlocal status changes \fP 
.br
 Any subsequente modifications to \fBLinphoneFriend\fP must be first started by a call to function \fBlinphone_friend_edit()\fP and validated by function \fBlinphone_friend_done()\fP 
.PP
.nf
linphone_friend_edit(my_friend); /* start editing friend */
linphone_friend_enable_subscribes(my_friend,FALSE); /*disable subscription for this friend*/
linphone_friend_done(my_friend); /*commit changes triggering an UNSUBSCRIBE message*/

.fi
.PP
.PP
\fB Publishing presence status \fP 
.br
Local presence status can be changed using function \fBlinphone_core_set_presence_model()\fP \&.New status is propagated to all friends \fBpreviously added \fP to \fBLinphoneCore\fP\&.
.PP
\fBHandling incoming subscription request\fP 
.br
 New incoming subscription requests are process according to \fBthe incoming subscription policy state \fP for subscription initiated by \fBmembers of the buddy list\&. \fP 
.br
 For incoming request comming from an unknown buddy, the call back \fBLinphoneCoreVTable\&.new_subscription_request\fP is invoked\&.
.PP

.br
 A complete tutorial can be found at : \fBRegistration tutorial\fP 
.SH "Typedef Documentation"
.PP 
.SS "typedef enum \fB_LinphoneOnlineStatus\fP \fBLinphoneOnlineStatus\fP"
Enum describing remote friend status 
.PP
\fBDeprecated\fP
.RS 4
Use \fBLinphonePresenceModel\fP and \fBLinphonePresenceActivity\fP instead 
.RE
.PP

.SS "typedef struct _LinphoneFriend \fBLinphoneFriend\fP"
Represents a buddy, all presence actions like subscription and status change notification are performed on this object 
.SS "typedef enum \fBLinphonePresenceBasicStatus\fP  \fBLinphonePresenceBasicStatus\fP"
Basic status as defined in section 4\&.1\&.4 of RFC 3863 
.SS "typedef enum \fBLinphonePresenceActivityType\fP  \fBLinphonePresenceActivityType\fP"
Activities as defined in section 3\&.2 of RFC 4480 
.SS "typedef struct \fB_LinphonePresenceModel\fP \fBLinphonePresenceModel\fP"
Presence model type holding information about the presence of a person\&. 
.SS "typedef struct _LinphonePresenceActivity \fBLinphonePresenceActivity\fP"
Presence activity type holding information about a presence activity\&. 
.SS "typedef struct _LinphonePresenceNote \fBLinphonePresenceNote\fP"
Presence note type holding information about a presence note\&. 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBLinphoneSubscribePolicy\fP"
Enum controlling behavior for incoming subscription request\&. 
.br
 Use by \fBlinphone_friend_set_inc_subscribe_policy()\fP 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILinphoneSPWait \fP\fP
Does not automatically accept an incoming subscription request\&. This policy implies that a decision has to be taken for each incoming subscription request notified by callback \fBLinphoneCoreVTable\&.new_subscription_request\fP 
.TP
\fB\fILinphoneSPDeny \fP\fP
Rejects incoming subscription request\&. 
.TP
\fB\fILinphoneSPAccept \fP\fP
Automatically accepts a subscription request\&. 
.SS "enum \fB_LinphoneOnlineStatus\fP"
Enum describing remote friend status 
.PP
\fBDeprecated\fP
.RS 4
Use \fBLinphonePresenceModel\fP and \fBLinphonePresenceActivity\fP instead 
.RE
.PP

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILinphoneStatusOffline \fP\fP
Offline 
.TP
\fB\fILinphoneStatusOnline \fP\fP
Online 
.TP
\fB\fILinphoneStatusBusy \fP\fP
Busy 
.TP
\fB\fILinphoneStatusBeRightBack \fP\fP
Be right back 
.TP
\fB\fILinphoneStatusAway \fP\fP
Away 
.TP
\fB\fILinphoneStatusOnThePhone \fP\fP
On the phone 
.TP
\fB\fILinphoneStatusOutToLunch \fP\fP
Out to lunch 
.TP
\fB\fILinphoneStatusDoNotDisturb \fP\fP
Do not disturb 
.TP
\fB\fILinphoneStatusMoved \fP\fP
Moved in this sate, call can be redirected if an alternate contact address has been set using function \fBlinphone_core_set_presence_info()\fP 
.TP
\fB\fILinphoneStatusAltService \fP\fP
Using another messaging service 
.TP
\fB\fILinphoneStatusPending \fP\fP
Pending 
.TP
\fB\fILinphoneStatusVacation \fP\fP
Vacation 
.SS "enum \fBLinphonePresenceBasicStatus\fP"
Basic status as defined in section 4\&.1\&.4 of RFC 3863 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILinphonePresenceBasicStatusOpen \fP\fP
This value means that the associated contact element, if any, is ready to accept communication\&. 
.TP
\fB\fILinphonePresenceBasicStatusClosed \fP\fP
This value means that the associated contact element, if any, is unable to accept communication\&. 
.SS "enum \fBLinphonePresenceActivityType\fP"
Activities as defined in section 3\&.2 of RFC 4480 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILinphonePresenceActivityOffline \fP\fP
This value is not defined in the RFC, it corresponds to no activity with a basic status of 'closed'\&. 
.TP
\fB\fILinphonePresenceActivityOnline \fP\fP
This value is not defined in the RFC, it corresponds to no activity with a basic status of 'open'\&. 
.TP
\fB\fILinphonePresenceActivityAppointment \fP\fP
The person has a calendar appointment, without specifying exactly of what type\&. This activity is indicated if more detailed information is not available or the person chooses not to reveal more information\&. 
.TP
\fB\fILinphonePresenceActivityAway \fP\fP
The person is physically away from all interactive communication devices\&. 
.TP
\fB\fILinphonePresenceActivityBreakfast \fP\fP
The person is eating the first meal of the day, usually eaten in the morning\&. 
.TP
\fB\fILinphonePresenceActivityBusy \fP\fP
The person is busy, without further details\&. 
.TP
\fB\fILinphonePresenceActivityDinner \fP\fP
The person is having his or her main meal of the day, eaten in the evening or at midday\&. 
.TP
\fB\fILinphonePresenceActivityHoliday \fP\fP
This is a scheduled national or local holiday\&. 
.TP
\fB\fILinphonePresenceActivityInTransit \fP\fP
The person is riding in a vehicle, such as a car, but not steering\&. 
.TP
\fB\fILinphonePresenceActivityLookingForWork \fP\fP
The person is looking for (paid) work\&. 
.TP
\fB\fILinphonePresenceActivityLunch \fP\fP
The person is eating his or her midday meal\&. 
.TP
\fB\fILinphonePresenceActivityMeal \fP\fP
The person is scheduled for a meal, without specifying whether it is breakfast, lunch, or dinner, or some other meal\&. 
.TP
\fB\fILinphonePresenceActivityMeeting \fP\fP
The person is in an assembly or gathering of people, as for a business, social, or religious purpose\&. A meeting is a sub-class of an appointment\&. 
.TP
\fB\fILinphonePresenceActivityOnThePhone \fP\fP
The person is talking on the telephone\&. 
.TP
\fB\fILinphonePresenceActivityOther \fP\fP
The person is engaged in an activity with no defined representation\&. A string describing the activity in plain text SHOULD be provided\&. 
.TP
\fB\fILinphonePresenceActivityPerformance \fP\fP
A performance is a sub-class of an appointment and includes musical, theatrical, and cinematic performances as well as lectures\&. It is distinguished from a meeting by the fact that the person may either be lecturing or be in the audience, with a potentially large number of other people, making interruptions particularly noticeable\&. 
.TP
\fB\fILinphonePresenceActivityPermanentAbsence \fP\fP
The person will not return for the foreseeable future, e\&.g\&., because it is no longer working for the company\&. 
.TP
\fB\fILinphonePresenceActivityPlaying \fP\fP
The person is occupying himself or herself in amusement, sport, or other recreation\&. 
.TP
\fB\fILinphonePresenceActivityPresentation \fP\fP
The person is giving a presentation, lecture, or participating in a formal round-table discussion\&. 
.TP
\fB\fILinphonePresenceActivityShopping \fP\fP
The person is visiting stores in search of goods or services\&. 
.TP
\fB\fILinphonePresenceActivitySleeping \fP\fP
The person is sleeping\&. 
.TP
\fB\fILinphonePresenceActivitySpectator \fP\fP
The person is observing an event, such as a sports event\&. 
.TP
\fB\fILinphonePresenceActivitySteering \fP\fP
The person is controlling a vehicle, watercraft, or plane\&. 
.TP
\fB\fILinphonePresenceActivityTravel \fP\fP
The person is on a business or personal trip, but not necessarily in-transit\&. 
.TP
\fB\fILinphonePresenceActivityTV \fP\fP
The person is watching television\&. 
.TP
\fB\fILinphonePresenceActivityUnknown \fP\fP
The activity of the person is unknown\&. 
.TP
\fB\fILinphonePresenceActivityVacation \fP\fP
A period of time devoted to pleasure, rest, or relaxation\&. 
.TP
\fB\fILinphonePresenceActivityWorking \fP\fP
The person is engaged in, typically paid, labor, as part of a profession or job\&. 
.TP
\fB\fILinphonePresenceActivityWorship \fP\fP
The person is participating in religious rites\&. 
.SH "Function Documentation"
.PP 
.SS "LINPHONE_PUBLIC \fBLinphoneFriend\fP* linphone_friend_new ()"
Contructor 
.PP
\fBReturns:\fP
.RS 4
a new empty \fBLinphoneFriend\fP 
.RE
.PP

.SS "LINPHONE_PUBLIC \fBLinphoneFriend\fP* linphone_friend_new_with_addr (const char *addr)"
Contructor same as \fBlinphone_friend_new()\fP + \fBlinphone_friend_set_addr()\fP 
.PP
\fBParameters:\fP
.RS 4
\fIaddr\fP a buddy address, must be a sip uri like sip:joe@sip.linphone.org 
.RE
.PP
\fBReturns:\fP
.RS 4
a new \fBLinphoneFriend\fP with \fBaddress initialized \fP 
.RE
.PP

.SS "LINPHONE_PUBLIC void linphone_friend_destroy (\fBLinphoneFriend\fP *lf)"
Destructor 
.PP
\fBParameters:\fP
.RS 4
\fIlf\fP \fBLinphoneFriend\fP object 
.RE
.PP

.SS "LINPHONE_PUBLIC int linphone_friend_set_addr (\fBLinphoneFriend\fP *fr, const \fBLinphoneAddress\fP *address)"
set \fBLinphoneAddress\fP for this friend 
.PP
\fBParameters:\fP
.RS 4
\fIfr\fP \fBLinphoneFriend\fP object 
.br
\fIaddress\fP \fBLinphoneAddress\fP 
.RE
.PP

.SS "LINPHONE_PUBLIC int linphone_friend_set_name (\fBLinphoneFriend\fP *lf, const char *name)"
set the display name for this friend 
.PP
\fBParameters:\fP
.RS 4
\fIlf\fP \fBLinphoneFriend\fP object 
.br
\fIname\fP 
.RE
.PP

.SS "LINPHONE_PUBLIC const \fBLinphoneAddress\fP* linphone_friend_get_address (const \fBLinphoneFriend\fP *lf)"
get address of this friend 
.PP
\fBParameters:\fP
.RS 4
\fIlf\fP \fBLinphoneFriend\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBLinphoneAddress\fP 
.RE
.PP

.SS "LINPHONE_PUBLIC bool_t linphone_friend_subscribes_enabled (const \fBLinphoneFriend\fP *lf)"
get subscription flag value 
.PP
\fBParameters:\fP
.RS 4
\fIlf\fP \fBLinphoneFriend\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
returns true is subscription is activated for this friend 
.RE
.PP

.SS "LINPHONE_PUBLIC int linphone_friend_enable_subscribes (\fBLinphoneFriend\fP *fr, bool_tval)"
Configure \fBLinphoneFriend\fP to subscribe to presence information 
.PP
\fBParameters:\fP
.RS 4
\fIfr\fP \fBLinphoneFriend\fP object 
.br
\fIval\fP if TRUE this friend will receive subscription message 
.RE
.PP

.SS "LINPHONE_PUBLIC int linphone_friend_set_inc_subscribe_policy (\fBLinphoneFriend\fP *fr, \fBLinphoneSubscribePolicy\fPpol)"
Configure incoming subscription policy for this friend\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfr\fP \fBLinphoneFriend\fP object 
.br
\fIpol\fP \fBLinphoneSubscribePolicy\fP policy to apply\&. 
.RE
.PP

.SS "LINPHONE_PUBLIC \fBLinphoneSubscribePolicy\fP linphone_friend_get_inc_subscribe_policy (const \fBLinphoneFriend\fP *lf)"
get current subscription policy for this \fBLinphoneFriend\fP 
.PP
\fBParameters:\fP
.RS 4
\fIlf\fP \fBLinphoneFriend\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBLinphoneSubscribePolicy\fP 
.RE
.PP

.SS "LINPHONE_PUBLIC void linphone_friend_edit (\fBLinphoneFriend\fP *fr)"
Starts editing a friend configuration\&.
.PP
Because friend configuration must be consistent, applications MUST call \fBlinphone_friend_edit()\fP before doing any attempts to modify friend configuration (such as \fBaddress \fP or \fBsubscription policy\fP and so on)\&. Once the modifications are done, then the application must call \fBlinphone_friend_done()\fP to commit the changes\&. 
.SS "LINPHONE_PUBLIC void linphone_friend_done (\fBLinphoneFriend\fP *fr)"
Commits modification made to the friend configuration\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfr\fP \fBLinphoneFriend\fP object 
.RE
.PP

.SS "LINPHONE_PUBLIC \fBLinphoneOnlineStatus\fP linphone_friend_get_status (const \fBLinphoneFriend\fP *lf)"

.PP
Get the status of a friend\&. \fBParameters:\fP
.RS 4
\fIlf\fP A \fBLinphoneFriend\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBLinphoneOnlineStatus\fP 
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_friend_get_presence_model()\fP instead 
.RE
.PP

.SS "LINPHONE_PUBLIC const \fBLinphonePresenceModel\fP* linphone_friend_get_presence_model (\fBLinphoneFriend\fP *lf)"

.PP
Get the presence information of a friend\&. \fBParameters:\fP
.RS 4
\fIlf\fP A \fBLinphoneFriend\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
A \fBLinphonePresenceModel\fP object, or NULL if the friend do not have presence information (in which case he is considered offline) 
.RE
.PP

.SS "LINPHONE_PUBLIC const char* linphone_online_status_to_string (\fBLinphoneOnlineStatus\fPss)"
Return humain readable presence status 
.PP
\fBParameters:\fP
.RS 4
\fIss\fP 
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBLinphonePresenceModel\fP, \fBLinphonePresenceActivity\fP and \fBlinphone_presence_activity_to_string()\fP instead\&. 
.RE
.PP

.SS "LINPHONE_PUBLIC void linphone_core_set_presence_info (\fBLinphoneCore\fP *lc, intminutes_away, const char *alternative_contact, \fBLinphoneOnlineStatus\fPos)"

.PP
Set my presence status\&. \fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fIminutes_away\fP how long in away 
.br
\fIalternative_contact\fP sip uri used to redirect call in state \fBLinphoneStatusMoved\fP 
.br
\fIos\fP \fBLinphoneOnlineStatus\fP 
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_core_set_presence_model()\fP instead 
.RE
.PP

.SS "LINPHONE_PUBLIC void linphone_core_set_presence_model (\fBLinphoneCore\fP *lc, \fBLinphonePresenceModel\fP *presence)"

.PP
Set my presence status\&. \fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fIpresence\fP \fBLinphonePresenceModel\fP 
.RE
.PP

.SS "LINPHONE_PUBLIC \fBLinphoneOnlineStatus\fP linphone_core_get_presence_info (const \fBLinphoneCore\fP *lc)"

.PP
Get my presence status\&. \fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBLinphoneOnlineStatus\fP 
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_core_get_presence_model()\fP instead 
.RE
.PP

.SS "LINPHONE_PUBLIC \fBLinphonePresenceModel\fP* linphone_core_get_presence_model (const \fBLinphoneCore\fP *lc)"

.PP
Get my presence status\&. \fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
A \fBLinphonePresenceModel\fP object, or NULL if no presence model has been set\&. 
.RE
.PP

.SS "LINPHONE_PUBLIC void linphone_core_add_friend (\fBLinphoneCore\fP *lc, \fBLinphoneFriend\fP *fr)"
Add a friend to the current buddy list, if \fBsubscription attribute \fP is set, a SIP SUBSCRIBE message is sent\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fIfr\fP \fBLinphoneFriend\fP to add 
.RE
.PP

.SS "LINPHONE_PUBLIC void linphone_core_remove_friend (\fBLinphoneCore\fP *lc, \fBLinphoneFriend\fP *fr)"
remove a friend from the buddy list 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fIfr\fP \fBLinphoneFriend\fP to add 
.RE
.PP

.SS "LINPHONE_PUBLIC void linphone_core_reject_subscriber (\fBLinphoneCore\fP *lc, \fBLinphoneFriend\fP *lf)"
Black list a friend\&. same as \fBlinphone_friend_set_inc_subscribe_policy()\fP with \fBLinphoneSPDeny\fP policy; 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fIlf\fP \fBLinphoneFriend\fP to add 
.RE
.PP

.SS "LINPHONE_PUBLIC const MSList* linphone_core_get_friend_list (const \fBLinphoneCore\fP *lc)"
get Buddy list of LinphoneFriend 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.RE
.PP

.SS "LINPHONE_PUBLIC void linphone_core_notify_all_friends (\fBLinphoneCore\fP *lc, \fBLinphonePresenceModel\fP *presence)"
notify all friends that have subscribed 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fIos\fP \fBLinphoneOnlineStatus\fP to notify 
.RE
.PP

.SS "LINPHONE_PUBLIC \fBLinphonePresenceModel\fP* linphone_presence_model_new (void)"

.PP
Creates a default presence model\&. \fBReturns:\fP
.RS 4
The created presence model, NULL on error\&. 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBlinphone_presence_model_new_with_activity\fP 
.PP
\fBlinphone_presence_model_new_with_activity_and_note\fP
.RE
.PP
The created presence model is considered 'offline'\&. 
.SS "LINPHONE_PUBLIC \fBLinphonePresenceModel\fP* linphone_presence_model_new_with_activity (\fBLinphonePresenceActivityType\fPactivity, const char *description)"

.PP
Creates a presence model specifying an activity\&. \fBParameters:\fP
.RS 4
\fIactivity\fP The activity to set for the created presence model\&. 
.br
\fIdescription\fP An additional description of the activity (mainly useful for the 'other' activity)\&. Set it to NULL to not add a description\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The created presence model, or NULL if an error occured\&. 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBlinphone_presence_model_new\fP 
.PP
\fBlinphone_presence_model_new_with_activity_and_note\fP
.RE
.PP
The created presence model has the activity specified in the parameters\&. 
.SS "LINPHONE_PUBLIC \fBLinphonePresenceModel\fP* linphone_presence_model_new_with_activity_and_note (\fBLinphonePresenceActivityType\fPactivity, const char *description, const char *note, const char *lang)"

.PP
Creates a presence model specifying an activity and adding a note\&. \fBParameters:\fP
.RS 4
\fIactivity\fP The activity to set for the created presence model\&. 
.br
\fIdescription\fP An additional description of the activity (mainly useful for the 'other' activity)\&. Set it to NULL to not add a description\&. 
.br
\fInote\fP An additional note giving additional information about the contact presence\&. 
.br
\fIlang\fP The language the note is written in\&. It can be set to NULL in order to not specify the language of the note\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The created presence model, or NULL if an error occured\&. 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBlinphone_presence_model_new_with_activity\fP 
.PP
\fBlinphone_presence_model_new_with_activity_and_note\fP
.RE
.PP
The created presence model has the activity and the note specified in the parameters\&. 
.SS "\fBLinphonePresenceModel\fP* linphone_presence_model_ref (\fBLinphonePresenceModel\fP *model)"
Increase the reference count of the \fBLinphonePresenceModel\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object for which the reference count is to be increased\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The \fBLinphonePresenceModel\fP object with the increased reference count\&. 
.RE
.PP

.SS "\fBLinphonePresenceModel\fP* linphone_presence_model_unref (\fBLinphonePresenceModel\fP *model)"
Decrease the reference count of the \fBLinphonePresenceModel\fP object and destroy it if it reaches 0\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object for which the reference count is to be decreased\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The \fBLinphonePresenceModel\fP object if the reference count is still positive, NULL if the object has been destroyed\&. 
.RE
.PP

.SS "void linphone_presence_model_set_user_data (\fBLinphonePresenceModel\fP *model, void *user_data)"
Sets the user data of a \fBLinphonePresenceModel\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object for which to set the user data\&. 
.br
\fIuser_data\fP A pointer to the user data to set\&. 
.RE
.PP

.SS "void* linphone_presence_model_get_user_data (\fBLinphonePresenceModel\fP *model)"
Gets the user data of a \fBLinphonePresenceModel\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object for which to get the user data\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the user data\&. 
.RE
.PP

.SS "LINPHONE_PUBLIC \fBLinphonePresenceBasicStatus\fP linphone_presence_model_get_basic_status (const \fBLinphonePresenceModel\fP *model)"

.PP
Gets the basic status of a presence model\&. \fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object to get the basic status from\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The \fBLinphonePresenceBasicStatus\fP of the \fBLinphonePresenceModel\fP object given as parameter\&. 
.RE
.PP

.SS "LINPHONE_PUBLIC time_t linphone_presence_model_get_timestamp (const \fBLinphonePresenceModel\fP *model)"

.PP
Gets the timestamp of a presence model\&. \fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object to get the timestamp from\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The timestamp of the \fBLinphonePresenceModel\fP object or -1 on error\&. 
.RE
.PP

.SS "LINPHONE_PUBLIC char* linphone_presence_model_get_contact (const \fBLinphonePresenceModel\fP *model)"

.PP
Gets the contact of a presence model\&. \fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object to get the contact from\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to a dynamically allocated string containing the contact, or NULL if no contact is found\&.
.RE
.PP
The returned string is to be freed by calling ms_free()\&. 
.SS "LINPHONE_PUBLIC void linphone_presence_model_set_contact (\fBLinphonePresenceModel\fP *model, const char *contact)"

.PP
Sets the contact of a presence model\&. \fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object for which to set the contact\&. 
.br
\fIcontact\fP The contact string to set\&. 
.RE
.PP

.SS "LINPHONE_PUBLIC unsigned int linphone_presence_model_nb_activities (const \fBLinphonePresenceModel\fP *model)"

.PP
Gets the number of activities included in the presence model\&. \fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object to get the number of activities from\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The number of activities included in the \fBLinphonePresenceModel\fP object\&. 
.RE
.PP

.SS "LINPHONE_PUBLIC \fBLinphonePresenceActivity\fP* linphone_presence_model_get_nth_activity (const \fBLinphonePresenceModel\fP *model, unsigned intidx)"

.PP
Gets the nth activity of a presence model\&. \fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object to get the activity from\&. 
.br
\fIidx\fP The index of the activity to get (the first activity having the index 0)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to a \fBLinphonePresenceActivity\fP object if successful, NULL otherwise\&. 
.RE
.PP

.SS "LINPHONE_PUBLIC \fBLinphonePresenceActivity\fP* linphone_presence_model_get_activity (const \fBLinphonePresenceModel\fP *model)"

.PP
Gets the first activity of a presence model (there is usually only one)\&. \fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object to get the activity from\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A \fBLinphonePresenceActivity\fP object if successful, NULL otherwise\&. 
.RE
.PP

.SS "LINPHONE_PUBLIC int linphone_presence_model_set_activity (\fBLinphonePresenceModel\fP *model, \fBLinphonePresenceActivityType\fPactivity, const char *description)"

.PP
Sets the activity of a presence model (limits to only one activity)\&. \fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object for which to set the activity\&. 
.br
\fIactivity\fP The \fBLinphonePresenceActivityType\fP to set for the model\&. 
.br
\fIdescription\fP An additional description of the activity to set for the model\&. Can be NULL if no additional description is to be added\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, a value < 0 in case of error\&. 
.RE
.PP

.SS "LINPHONE_PUBLIC \fBLinphonePresenceNote\fP* linphone_presence_model_get_note (const \fBLinphonePresenceModel\fP *model, const char *lang)"

.PP
Gets the first note of a presence model (there is usually only one)\&. \fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object to get the note from\&. 
.br
\fIlang\fP The language of the note to get\&. Can be NULL to get a note that has no language specified or to get the first note whatever language it is written into\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to a \fBLinphonePresenceNote\fP object if successful, NULL otherwise\&. 
.RE
.PP

.SS "LINPHONE_PUBLIC int linphone_presence_model_add_note (\fBLinphonePresenceModel\fP *model, const char *note_content, const char *lang)"

.PP
Adds a note to a presence model\&. \fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object to add a note to\&. 
.br
\fInote_content\fP The note to be added to the presence model\&. 
.br
\fIlang\fP The language of the note to be added\&. Can be NULL if no language is to be specified for the note\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, a value < 0 in case of error\&.
.RE
.PP
Only one note for each language can be set, so e\&.g\&. setting a note for the 'fr' language if there is only one will replace the existing one\&. 
.SS "LINPHONE_PUBLIC int linphone_presence_model_clear_notes (\fBLinphonePresenceModel\fP *model)"

.PP
Clears all the notes of a presence model\&. \fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP for which to clear notes\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, a value < 0 in case of error\&. 
.RE
.PP

.SS "\fBLinphonePresenceActivity\fP* linphone_presence_activity_ref (\fBLinphonePresenceActivity\fP *activity)"
Increase the reference count of the \fBLinphonePresenceActivity\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIactivity\fP The \fBLinphonePresenceActivity\fP object for which the reference count is to be increased\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The \fBLinphonePresenceActivity\fP object with the increased reference count\&. 
.RE
.PP

.SS "\fBLinphonePresenceActivity\fP* linphone_presence_activity_unref (\fBLinphonePresenceActivity\fP *activity)"
Decrease the reference count of the \fBLinphonePresenceActivity\fP object and destroy it if it reaches 0\&. 
.PP
\fBParameters:\fP
.RS 4
\fIactivity\fP The \fBLinphonePresenceActivity\fP object for which the reference count is to be decreased\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The \fBLinphonePresenceActivity\fP object if the reference count is still positive, NULL if the object has been destroyed\&. 
.RE
.PP

.SS "void linphone_presence_activity_set_user_data (\fBLinphonePresenceActivity\fP *activity, void *user_data)"
Sets the user data of a \fBLinphonePresenceActivity\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIactivity\fP The \fBLinphonePresenceActivity\fP object for which to set the user data\&. 
.br
\fIuser_data\fP A pointer to the user data to set\&. 
.RE
.PP

.SS "void* linphone_presence_activity_get_user_data (\fBLinphonePresenceActivity\fP *activity)"
Gets the user data of a \fBLinphonePresenceActivity\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIactivity\fP The \fBLinphonePresenceActivity\fP object for which to get the user data\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the user data\&. 
.RE
.PP

.SS "LINPHONE_PUBLIC char* linphone_presence_activity_to_string (const \fBLinphonePresenceActivity\fP *activity)"

.PP
Gets the string representation of a presence activity\&. \fBParameters:\fP
.RS 4
\fIactivity\fP A pointer to the \fBLinphonePresenceActivity\fP object for which to get a string representation\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer a dynamically allocated string representing the given activity\&.
.RE
.PP
The returned string is to be freed by calling ms_free()\&. 
.SS "LINPHONE_PUBLIC \fBLinphonePresenceActivityType\fP linphone_presence_activity_get_type (const \fBLinphonePresenceActivity\fP *activity)"

.PP
Gets the activity type of a presence activity\&. \fBParameters:\fP
.RS 4
\fIactivity\fP A pointer to the \fBLinphonePresenceActivity\fP for which to get the type\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The \fBLinphonePresenceActivityType\fP of the activity\&. 
.RE
.PP

.SS "LINPHONE_PUBLIC const char* linphone_presence_activity_get_description (const \fBLinphonePresenceActivity\fP *activity)"

.PP
Gets the description of a presence activity\&. \fBParameters:\fP
.RS 4
\fIactivity\fP A pointer to the \fBLinphonePresenceActivity\fP for which to get the description\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the description string of the presence activity, or NULL if no description is specified\&. 
.RE
.PP

.SS "\fBLinphonePresenceNote\fP* linphone_presence_note_ref (\fBLinphonePresenceNote\fP *note)"
Increase the reference count of the \fBLinphonePresenceNote\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fInote\fP The \fBLinphonePresenceNote\fP object for which the reference count is to be increased\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The \fBLinphonePresenceNote\fP object with the increased reference count\&. 
.RE
.PP

.SS "\fBLinphonePresenceNote\fP* linphone_presence_note_unref (\fBLinphonePresenceNote\fP *note)"
Decrease the reference count of the \fBLinphonePresenceNote\fP object and destroy it if it reaches 0\&. 
.PP
\fBParameters:\fP
.RS 4
\fInote\fP The \fBLinphonePresenceNote\fP object for which the reference count is to be decreased\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The \fBLinphonePresenceNote\fP object if the reference count is still positive, NULL if the object has been destroyed\&. 
.RE
.PP

.SS "void linphone_presence_note_set_user_data (\fBLinphonePresenceNote\fP *note, void *user_data)"
Sets the user data of a \fBLinphonePresenceNote\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fInote\fP The \fBLinphonePresenceNote\fP object for which to set the user data\&. 
.br
\fIuser_data\fP A pointer to the user data to set\&. 
.RE
.PP

.SS "void* linphone_presence_note_get_user_data (\fBLinphonePresenceNote\fP *note)"
Gets the user data of a \fBLinphonePresenceNote\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fInote\fP The \fBLinphonePresenceNote\fP object for which to get the user data\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the user data\&. 
.RE
.PP

.SS "LINPHONE_PUBLIC const char* linphone_presence_note_get_content (const \fBLinphonePresenceNote\fP *note)"

.PP
Gets the content of a presence note\&. \fBParameters:\fP
.RS 4
\fInote\fP A pointer to the \fBLinphonePresenceNote\fP for which to get the content\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the content of the presence note\&. 
.RE
.PP

.SS "LINPHONE_PUBLIC const char* linphone_presence_note_get_lang (const \fBLinphonePresenceNote\fP *note)"

.PP
Gets the language of a presence note\&. \fBParameters:\fP
.RS 4
\fInote\fP A pointer to the \fBLinphonePresenceNote\fP for which to get the language\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the language string of the presence note, or NULL if no language is specified\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for liblinphone from the source code\&.
